package main

import (
	"github.com/pkg/errors"
	openconfig "github.com/thanos-io/OpenConfig/golang"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	contextPackage = protogen.GoImportPath("context")
	cliPackage     = protogen.GoImportPath("github.com/urfave/cli/v2")
)

func debug(gen *protogen.Plugin, s string, args ...interface{}) {
	gen.Error(errors.Errorf(s, args...))
}

// generateGoOpenConfig generates a _openconfig.pb.go file containing a code of Congfigurator and Configurable (based on https://github.com/urfave/cli/), based
// OpenConfig 1.0 specification.
func generateGoOpenConfig(gen *protogen.Plugin, file *protogen.File) error {
	var (
		ocEntryPoints []*openconfig.Configuration
		fEntryPoints  []*protogen.Message
	)

	for _, f := range file.Messages {
		e := proto.GetExtension(f.Desc.Options().(*descriptorpb.MessageOptions), openconfig.E_Configuration)
		if e == nil {
			continue
		}
		c, ok := e.(*openconfig.Configuration)
		if !ok {
			return errors.Errorf("unexpected type; got %T expected openconfig.Configuration", e)
		}

		ocEntryPoints = append(ocEntryPoints, c)
		fEntryPoints = append(fEntryPoints, f)
	}

	if len(ocEntryPoints) == 0 {
		// Nothing to generate.
		return nil
	}

	filename := file.GeneratedFilenamePrefix + "_openconfig.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-openconfig. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	g.Import(cliPackage)
	g.P()

	for i, c := range ocEntryPoints {
		if err := generateConfigurator(gen, g, c, fEntryPoints[i]); err != nil {
			return err
		}
		if err := generateConfigurable(gen, g, c, fEntryPoints[i]); err != nil {
			return err
		}
	}
	return nil
}

func generateConfigurator(gen *protogen.Plugin, g *protogen.GeneratedFile, c *openconfig.Configuration, root *protogen.Message) error {
	// Generate CLI app based on ttps://github.com/urfave/cli/)
	return nil
}

func generateConfigurable(gen *protogen.Plugin, g *protogen.GeneratedFile, c *openconfig.Configuration, root *protogen.Message) error {
	// debug(gen, "got %+v %v", c.Name)

	// Generate helpers?

	return nil
}
