// Code generated by protoc-gen-go-openconfig code. DO NOT EDIT.

package helloworldpb

import (
	fmt "fmt"
	golang "github.com/thanos-io/OpenConfig/golang"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	exec "os/exec"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the OpenConfig golang package it is being compiled against.
const _ = golang.SupportPackageIsVersion1

func NewHelloCommand(x *HelloCommand) *HelloWorld_Hello {
	return &HelloWorld_Hello{Hello: x}
}

func NewByeCommand(x *ByeCommand) *HelloWorld_Bye {
	return &HelloWorld_Bye{Bye: x}
}

func NewByeWorldCommand(x *ByeWorldCommand) *ByeCommand_World {
	return &ByeCommand_World{World: x}
}

func NewByeConfigurableCommand(x *ByeConfigurableCommand) *ByeCommand_Just {
	return &ByeCommand_Just{Just: x}
}

func (x *HelloWorld) Marshal() ([]byte, error) {
	return proto.Marshal(x)
}

func (x *HelloWorld) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(x)
}

func (x *HelloWorld) Metadata() golang.Metadata {
	return golang.Metadata{
		Name:              "configurable",
		Version:           "0.1.0",
		Description:       "example application to showcase OpenConfig 1.0.",
		DeliveryMechanism: &golang.Metadata_FlagDelivery{FlagDelivery: &golang.FlagDelivery{Name: "--openconfigv1"}},
	}
}

func (x *HelloWorld) NewExecCmd(name string) (*exec.Cmd, error) {
	b, err := x.Marshal()
	if err != nil {
		return nil, err
	}
	return exec.Command(name, fmt.Sprintf("--openconfigv1=%s", b)), nil
}

// This is a compile-time assertion to ensure that extendedHelloWorldimplements
// golang.Commander interface.
var _ golang.Commander = &HelloWorld{}

// This is a compile-time assertion to ensure that extended HelloWorld implements
// golang.Configurator interface.
var _ golang.Configurator = &HelloWorld{}

func (x *HelloWorld) Unmarshal(b []byte) error {
	// TODO(bwplotka): Generate code that checks first bytes and guess format from it.
	return proto.Unmarshal(b, x)
}

func (x *HelloWorld) UnmarshalString(b string) error {
	// TODO(bwplotka): Generate code that checks first bytes and guess format from it.
	return proto.Unmarshal([]byte(b), x)
}

// This is a compile-time assertion to ensure that extended HelloWorld implements
// golang.Configurable interface.
var _ golang.Configurable = &HelloWorld{}
