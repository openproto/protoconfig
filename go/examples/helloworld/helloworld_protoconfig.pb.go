// Code generated by protoc-gen-go-protoconfig code. DO NOT EDIT.

package helloworldpb

import (
	bytes "bytes"
	fmt "fmt"
	_go "github.com/protoconfig/protoconfig/go"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the ProtoConfig golang package it is being compiled against.
const _ = _go.SupportPackageIsVersion1

func NewHelloCommand(x *HelloCommand) *HelloWorldConfiguration_Hello {
	return &HelloWorldConfiguration_Hello{Hello: x}
}

func NewByeCommand(x *ByeCommand) *HelloWorldConfiguration_Bye {
	return &HelloWorldConfiguration_Bye{Bye: x}
}

func NewByeJustCommand(x *ByeJustCommand) *ByeCommand_Just {
	return &ByeCommand_Just{Just: x}
}

func NewByeConfigurableCommand(x *ByeConfigurableCommand) *ByeCommand_Configurable {
	return &ByeCommand_Configurable{Configurable: x}
}

// Encode encodes self as `Encoded Configuration Message` in proto format so it can be understood and
// passed to Configurable struct. It supports all `ProtoProto Config Extensions Format 1.0` extenstion
// (validation, default values etc).
// Use `proto.Marshal` encoding without `ProtoConfig 1.0` extension support.
func (x *HelloWorldConfiguration) Encode() ([]byte, error) {
	// TODO(bwplotka): Actually implement validation for `ProtoProto Config Extensions Format 1.0` (:
	return proto.Marshal(x)
}

// EncodeJSON encodes self as `Encoded Configuration Message` in JSON format so it can be understood and
// passed to Configurable struct. It supports all `ProtoProto Config Extensions Format 1.0` extenstion
// (validation, default values etc).
// Use `protojson.Marshal` encoding without `ProtoConfig 1.0` extension support.
func (x *HelloWorldConfiguration) EncodeJSON() ([]byte, error) {
	// TODO(bwplotka): Actually implement validation for `ProtoProto Config Extensions Format 1.0` (:
	return protojson.Marshal(x)
}

// Metadata returns metadata defined in `ProtoProto Config Extensions Format 1.0`.
func (x *HelloWorldConfiguration) Metadata() _go.Metadata {
	return _go.Metadata{
		Name:              "configurable",
		Version:           "0.1.0",
		Description:       "example application to showcase ProtoConfig 1.0.",
		DeliveryMechanism: &_go.Metadata_FlagDelivery{FlagDelivery: &_go.FlagDelivery{Name: "--protoconfigv1"}},
	}
}

func (x *HelloWorldConfiguration) CommandLineArgument() (string, error) {
	b, err := x.Encode()
	if err != nil {
		return "", err
	}
	return fmt.Sprintf("--protoconfigv1=%s", b), nil
}

// This is a compile-time assertion to ensure that extended HelloWorldConfiguration implements
// _go.Configurator interface.
var _ _go.Configurator = &HelloWorldConfiguration{}

// Decode parses byte slice as `Encoded Configuration Message` in JSON or proto format and unmarshal it on
// the Configurable struct. It supports all `ProtoProto Config Extensions Format 1.0` extenstion
// (validation, default values etc).
// Use `proto.Unmarshal` or `protojson.Unmarshal` for decoding without `ProtoConfig 1.0` extension support.
func (x *HelloWorldConfiguration) Decode(ecm []byte) error {
	// TODO(bwplotka): Actually implement validation for `ProtoProto Config Extensions Format 1.0` (:
	if isJSON(ecm) {
		return protojson.Unmarshal(ecm, x)
	}
	return proto.Unmarshal(ecm, x)
}

// DecodeString parses string as `Encoded Configuration Message` in JSON or proto format and unmarshal it on
// the Configurable struct. It supports all `ProtoProto Config Extensions Format 1.0` extenstion
// (validation, default values etc).
// Use `proto.Unmarshal` or `protojson.Unmarshal` for decoding without `ProtoConfig 1.0` extension support.
func (x *HelloWorldConfiguration) DecodeString(ecm string) error {
	return x.Decode([]byte(ecm))
}

func isJSON(b []byte) bool {
	bb := bytes.TrimSpace(b)
	if len(bb) == 0 {
		return false
	}
	return bb[0] == '{'
}

// This is a compile-time assertion to ensure that extended HelloWorldConfiguration implements
// _go.Configurable interface.
var _ _go.Configurable = &HelloWorldConfiguration{}
